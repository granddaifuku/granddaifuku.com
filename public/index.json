[{"categories":["TopCoder"],"contents":"Overview You are given an empty water tank with a capacity of \\(C\\) liters. Into this tank, the water flows \\(x[i]\\) liters for \\(t[i]\\) seconds. (\\(i = 0\\) to \\(n - 1\\)) You can set the value of output pipe to any maximum output rate \\(R\\) (not negative value, but do not have to be an integer) in liters per second. Determine the most little output rate limit \\(R\\) such that the amount of water in the tank will never exceed \\(C\\) liters. Explanation When it comes to \u0026ldquo;Find the maximum of the minimum,\u0026rdquo; we can use Binary Search. The returning value can be double, so we apply binary search until the difference between the left and the right value becomes less than the acceptable error. Code const double EPS = 1e-9; const Inf = 1e9; double minOutputRate(vector\u0026lt;int\u0026gt; t, vector\u0026lt;int\u0026gt; x, int C) { int n = (int)t.size(); double left = -EPS, right = Inf, mid; while (right - left \u0026gt; EPS) { mid = (right + left) / 2; double rem = 0.0; bool ok = true; for(int i = 0; i \u0026lt; n; i++) { rem += (x[i] - mid) * t[i]; rem = max(rem, (double)0); if (rem \u0026gt; C) { ok = false; break; } } if (ok) right = mid; else left = mid; } return right; } ","date":"September 21, 2021","hero":"/images/default-hero.jpg","permalink":"https://granddaifuku.com/posts/competitive/tc-676-div1-250/","summary":"Overview You are given an empty water tank with a capacity of \\(C\\) liters. Into this tank, the water flows \\(x[i]\\) liters for \\(t[i]\\) seconds. (\\(i = 0\\) to \\(n - 1\\)) You can set the value of output pipe to any maximum output rate \\(R\\) (not negative value, but do not have to be an integer) in liters per second. Determine the most little output rate limit \\(R\\) such that the amount of water in the tank will never exceed \\(C\\) liters.","tags":null,"title":"TopCoder SRM 676 Div.1 Easy: Water Tank"},{"categories":["Codeforces"],"contents":"Problem Overview Consider the permutation 1 to \\(n\\) called \\(P\\). The parameters \\(l, r, s\\) that satisfies \\(1 \\leq l \\leq r \\leq n\\) and \\(1 \\leq s \\leq \\frac{n(n + 1)}{2}\\) are given. Find the permutation which satisfies \\(P_{l} + P_{l + 1} + \u0026hellip; + P_{r} = s\\). Print any permutation of length \\(n\\) that fits the condition above if such a permutation exists; otherwise, -1. Problem Explanation First, consider the minimum and the maximum value we can generate with the length \\(r - l + 1\\).\nHereafter, we define \\(k = r - l + 1\\).\nMinimum Value\nAs an arithmetic sequence with first term 1, term number \\(m\\), and tolerance 1, we can derive the minimum value.\n\\(min(m) = \\frac{m(m + 1)}{2}\\)\nMaximum Value\nAs an arithmetic sequence with first term \\(x\\), term number \\(m\\), and tolerance -1, we can derive the maximum value.\n\\(max(x, m) = \\frac{m * (2 * x + (m - 1) * -1)}{2}\\) \\(max(x, m) = \\frac{m(2x - m + 1)}{2}\\)\nAny number \\(s\\) that satisfies \\(min(k) \\leq s \\leq max(n, k)\\) meet the condition.\nCoding\nFirst, we prepare the vector \\(res\\) with size \\(n\\) to push the results.\nConsider in descending order.\nStart the for loop from \\(n\\),\nif \\(i\\) meets the condition \\(max(i, k) - s \\geq 0\\) and \\(s - i \\geq min(k - 1)\\), put \\(i\\) to the \\(res[l + k]\\) and replace \\(k = k - 1, s = s - i\\).\nIterate this until \\(k\\) becomes 0, and then if \\(s = 0\\) is achieved, we find the permuation; otherwise, prints -1.\nThe remaining part of the implementation is to insert the unused numbers into the empty parts of the vector.\nSource Code\n","date":"May 9, 2021","hero":"/images/default-hero.jpg","permalink":"https://granddaifuku.com/posts/competitive/cf-713-div3-e/","summary":"Problem Overview Consider the permutation 1 to \\(n\\) called \\(P\\). The parameters \\(l, r, s\\) that satisfies \\(1 \\leq l \\leq r \\leq n\\) and \\(1 \\leq s \\leq \\frac{n(n + 1)}{2}\\) are given. Find the permutation which satisfies \\(P_{l} + P_{l + 1} + \u0026hellip; + P_{r} = s\\). Print any permutation of length \\(n\\) that fits the condition above if such a permutation exists; otherwise, -1. Problem Explanation First, consider the minimum and the maximum value we can generate with the length \\(r - l + 1\\).","tags":null,"title":"Codeforces #713(Div.3) E: Permutation by Sum"}]