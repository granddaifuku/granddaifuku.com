[{"categories":["Rust"],"contents":"はじめに Rust の lettre クレートでさくらのメールボックスを用いて独自ドメインでのメールを送信する際の記録です。 前提としては、 xdomain にて独自ドメインを取得済み Netlify DNS にネームサーバを設定してる 独自ドメインのメールアドレスでメールの送信がしたいが、ネームサーバは変更したくないというような状態です。 lettre Rust のメーラライブラリで、 SMTP(Simple Mail Transfer Protocol)を用いてセキュアなメールの送信ができる ファイルの送信 非同期サポート ユニコードサポート などなど欲しい機能が一通り揃っています。 さくらのメールボックスとは かの有名なさくらインターネットさんが用意されているプランの一つで、 独自ドメインのメールが使える 月額 87円（安すぎでは？） と主に月額にひかれて使い始めました。 やりたいこと さくらのメールボックスの登録、独自ドメインの追加、メールアドレスの作成は済んでいるものとします。 Rust 内から lettre を使って独自ドメインからメールを送信しましょう。 まず、公式のサンプルを見てみます。 use lettre::transport::smtp::authentication::Credentials; use lettre::{Message, SmtpTransport, Transport}; let email = Message::builder() .from(\u0026#34;NoBody \u0026lt;nobody@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .reply_to(\u0026#34;Yuin \u0026lt;yuin@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .to(\u0026#34;Hei \u0026lt;hei@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .subject(\u0026#34;Happy new year\u0026#34;) .body(String::from(\u0026#34;Be happy!\u0026#34;)) .unwrap(); let creds = Credentials::new(\u0026#34;smtp_username\u0026#34;.to_string(), \u0026#34;smtp_password\u0026#34;.to_string()); // Open a remote connection to gmail let mailer = SmtpTransport::relay(\u0026#34;smtp.gmail.com\u0026#34;) .unwrap() .credentials(creds) .build(); // Send the email match mailer.send(\u0026amp;email) { Ok(_) =\u0026gt; println!(\u0026#34;Email sent successfully!\u0026#34;), Err(e) =\u0026gt; panic!(\u0026#34;Could not send email: {:?}\u0026#34;, e), ここで必要になるものが let creds = Credentials::new(\u0026#34;smtp_username\u0026#34;.to_string(), \u0026#34;smtp_password\u0026#34;.to_string()); // Open a remote connection to gmail let mailer = SmtpTransport::relay(\u0026#34;smtp.gmail.com\u0026#34;) .unwrap() .credentials(creds) .build(); の部分です。 初めに smtp_username, smtp_password にそれぞれ独自ドメインを使用したメールアドレス、そのメールアドレス作成時のパスワードを設定します。 ここでは、例としてメールアドレスが、 dummy@exmaple_domain.com でパスワードが、 dummy_password であるものとします。 続いて、 mailer の接続情報ですが、ここに初期ドメインを設定します。アカウント情報から見れます。 例として、 example.initial.domain.com としておきます。 git等にあげる際には、ドメイン情報やパスワード等を流出しないように気をつけてください。 したがって、ソースコードは次のようになります。 let creds = Credentials::new(\u0026#34;dummy@example_domain.com\u0026#34;.to_string(), \u0026#34;dummy_password\u0026#34;.to_string()); // Open a remote connection let mailer = SmtpTransport::relay(\u0026#34;example.initial.domain.com\u0026#34;) .unwrap() .credentials(creds) .build(); しかし、このままではさくらのメールボックスを使った送信はできません。 さくらのメールボックスではメールの暗号化通信に STARTTLS を使用します。 したがって、mailer 部分を次のように改変します。 // Open a remote connection using STARTTLS let mailer = SmtpTransport::starttls_relay(\u0026#34;exmaple.initial.domain.com\u0026#34;) .unwrap() .credentials(creds) .build(); これにより lettre を経由して独自ドメインからメールの送信ができるようになりました。 git等にあげる際には、ドメイン情報やパスワード等を流出しないように気をつけてください。 参考リンク lettre github みどりみちのブログ さくらのメールボックス さくらのレンタルサーバ（ドメインの設定） さくらのレンタルサーバ（メールアドレスの作成） ","date":"June 1, 2021","hero":"/images/default-hero.jpg","permalink":"https://granddaifuku.com/jp/posts/development/rust-lettre-sakura-mailbox/","summary":"はじめに Rust の lettre クレートでさくらのメールボックスを用いて独自ドメインでのメールを送信する際の記録です。 前提としては、 xdomain にて独自ドメインを取得済み Netlify DNS にネームサーバを設定してる 独自ドメインのメールアドレスでメールの送信がしたいが、ネームサーバは変更したくないというような状態です。 lettre Rust のメーラライブラリで、 SMTP(Simple Mail Transfer Protocol)を用いてセキュアなメールの送信ができる ファイルの送信 非同期サポート ユニコードサポート などなど欲しい機能が一通り揃っています。 さくらのメールボックスとは かの有名なさくらインターネットさんが用意されているプランの一つで、 独自ドメインのメールが使える 月額 87円（安すぎでは？） と主に月額にひかれて使い始めました。 やりたいこと さくらのメールボックスの登録、独自ドメインの追加、メールアドレスの作成は済んでいるものとします。 Rust 内から lettre を使って独自ドメインからメールを送信しましょう。 まず、公式のサンプルを見てみます。 use lettre::transport::smtp::authentication::Credentials; use lettre::{Message, SmtpTransport, Transport}; let email = Message::builder() .from(\u0026#34;NoBody \u0026lt;nobody@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .reply_to(\u0026#34;Yuin \u0026lt;yuin@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .to(\u0026#34;Hei \u0026lt;hei@domain.tld\u0026gt;\u0026#34;.parse().unwrap()) .subject(\u0026#34;Happy new year\u0026#34;) .body(String::from(\u0026#34;Be happy!\u0026#34;)) .unwrap(); let creds = Credentials::new(\u0026#34;smtp_username\u0026#34;.to_string(), \u0026#34;smtp_password\u0026#34;.to_string()); // Open a remote connection to gmail let mailer = SmtpTransport::relay(\u0026#34;smtp.","tags":null,"title":"Rust(lettre)とさくらのメールボックスでメール送信"},{"categories":["Codeforces"],"contents":"問題概要 1 から \\(n\\) までの順列 \\(P\\) を考える \\(1 \\leq l \\leq r \\leq n\\) の \\(l, r\\), \\(1 \\leq s \\leq \\frac{n(n + 1)}{2}\\) の \\(s\\) が与えられる \\(P_{l} + P_{l + 1} + \u0026hellip; + P_{r} = s\\) となる 1 から \\(n\\) までの順列が存在するならばそれを出力、存在しないならば -1 を出力する 解説 1 から \\(n\\) までの順列の中で長さ \\(r - l + 1\\) で生成できる最小値、最大値を考える。\n以下、\\(k = r - l + 1\\) として扱う。\n最小値 初項 1、 項数 \\(m\\) 、公差 1 の等差数列としてみると、\n\\(min(m) = \\frac{m(m + 1)}{2}\\)\nが導かれる。\n最大値 初項 \\(x\\) 、項数 \\(m\\) 、公差 -1 の等差数列としてみると、\n\\(max(x, m) = \\frac{m * (2 * x + (m - 1) * -1)}{2}\\) \\(max(x, m) = \\frac{m(2x - m + 1)}{2}\\)\nが導かれる。\n\\(min(k) \\leq s \\leq max(n, k)\\) の間にある \\(s\\) は条件を満たすことがわかる。\n残るは実装のみで、\\(n\\) から大きい順に 指定の配列に入れるか入れないかを決めていけば良い。\n方針\n初めに答えを入れる用の配列 \\(res\\) を用意する。\n次に \\(n\\) から大きい順に考えていく。\n\\(n\\) からfor 文を回し、\n\\(max(i, k) - s \\geq 0\\) かつ \\(s - i \\geq min(k - 1)\\) を満たすならば\n配列 \\(res\\) の \\(l + k\\) に \\(i\\) を代入、\\(k = k - 1, s = s - i\\) で置き換える。\nこれを \\(k\\) が 0 になるまで繰り返し、最終的に \\(s = 0\\) が達成できれば OK である。\nあとは配列の空いている部分に使用していない文字を代入していけば良い。\n提出したソースコード\n","date":"May 7, 2021","hero":"/images/default-hero.jpg","permalink":"https://granddaifuku.com/jp/posts/competitive/cf-713-div3-e/","summary":"問題概要 1 から \\(n\\) までの順列 \\(P\\) を考える \\(1 \\leq l \\leq r \\leq n\\) の \\(l, r\\), \\(1 \\leq s \\leq \\frac{n(n + 1)}{2}\\) の \\(s\\) が与えられる \\(P_{l} + P_{l + 1} + \u0026hellip; + P_{r} = s\\) となる 1 から \\(n\\) までの順列が存在するならばそれを出力、存在しないならば -1 を出力する 解説 1 から \\(n\\) までの順列の中で長さ \\(r - l + 1\\) で生成できる最小値、最大値を考える。\n以下、\\(k = r - l + 1\\) として扱う。\n最小値 初項 1、 項数 \\(m\\) 、公差 1 の等差数列としてみると、","tags":null,"title":"Codeforces #713(Div.3) E: Permutation by Sum"}]